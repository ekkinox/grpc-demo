// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: textTools.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextToolsClient is the client API for TextTools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToolsClient interface {
	// Unary rpc
	TransformText(ctx context.Context, in *Transformation, opts ...grpc.CallOption) (*TransformationResult, error)
	// BiDi rpc
	TransformAndSplitText(ctx context.Context, opts ...grpc.CallOption) (TextTools_TransformAndSplitTextClient, error)
}

type textToolsClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToolsClient(cc grpc.ClientConnInterface) TextToolsClient {
	return &textToolsClient{cc}
}

func (c *textToolsClient) TransformText(ctx context.Context, in *Transformation, opts ...grpc.CallOption) (*TransformationResult, error) {
	out := new(TransformationResult)
	err := c.cc.Invoke(ctx, "/textTools.TextTools/TransformText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textToolsClient) TransformAndSplitText(ctx context.Context, opts ...grpc.CallOption) (TextTools_TransformAndSplitTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextTools_ServiceDesc.Streams[0], "/textTools.TextTools/TransformAndSplitText", opts...)
	if err != nil {
		return nil, err
	}
	x := &textToolsTransformAndSplitTextClient{stream}
	return x, nil
}

type TextTools_TransformAndSplitTextClient interface {
	Send(*Transformation) error
	Recv() (*TransformationResult, error)
	grpc.ClientStream
}

type textToolsTransformAndSplitTextClient struct {
	grpc.ClientStream
}

func (x *textToolsTransformAndSplitTextClient) Send(m *Transformation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textToolsTransformAndSplitTextClient) Recv() (*TransformationResult, error) {
	m := new(TransformationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextToolsServer is the server API for TextTools service.
// All implementations must embed UnimplementedTextToolsServer
// for forward compatibility
type TextToolsServer interface {
	// Unary rpc
	TransformText(context.Context, *Transformation) (*TransformationResult, error)
	// BiDi rpc
	TransformAndSplitText(TextTools_TransformAndSplitTextServer) error
	mustEmbedUnimplementedTextToolsServer()
}

// UnimplementedTextToolsServer must be embedded to have forward compatible implementations.
type UnimplementedTextToolsServer struct {
}

func (UnimplementedTextToolsServer) TransformText(context.Context, *Transformation) (*TransformationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformText not implemented")
}
func (UnimplementedTextToolsServer) TransformAndSplitText(TextTools_TransformAndSplitTextServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformAndSplitText not implemented")
}
func (UnimplementedTextToolsServer) mustEmbedUnimplementedTextToolsServer() {}

// UnsafeTextToolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToolsServer will
// result in compilation errors.
type UnsafeTextToolsServer interface {
	mustEmbedUnimplementedTextToolsServer()
}

func RegisterTextToolsServer(s grpc.ServiceRegistrar, srv TextToolsServer) {
	s.RegisterService(&TextTools_ServiceDesc, srv)
}

func _TextTools_TransformText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToolsServer).TransformText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/textTools.TextTools/TransformText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToolsServer).TransformText(ctx, req.(*Transformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextTools_TransformAndSplitText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextToolsServer).TransformAndSplitText(&textToolsTransformAndSplitTextServer{stream})
}

type TextTools_TransformAndSplitTextServer interface {
	Send(*TransformationResult) error
	Recv() (*Transformation, error)
	grpc.ServerStream
}

type textToolsTransformAndSplitTextServer struct {
	grpc.ServerStream
}

func (x *textToolsTransformAndSplitTextServer) Send(m *TransformationResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textToolsTransformAndSplitTextServer) Recv() (*Transformation, error) {
	m := new(Transformation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextTools_ServiceDesc is the grpc.ServiceDesc for TextTools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextTools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textTools.TextTools",
	HandlerType: (*TextToolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformText",
			Handler:    _TextTools_TransformText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransformAndSplitText",
			Handler:       _TextTools_TransformAndSplitText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "textTools.proto",
}
